<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VIDYASAARATHI Chatbot</title>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <!-- Include DOMPurify for XSS sanitization -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.4.7/purify.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: Arial, sans-serif; }
        body { display: flex; flex-direction: column; align-items: center; background: #f0f2f5; height: 100vh; }
        .navbar {
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: #333;
            color: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        .menu-icon i { font-size: 22px; cursor: pointer; }
        .title { font-size: 18px; font-weight: bold; text-align: center; flex: 1; }
        .chat-container {
            width: 90%;
            max-width: 600px;
            flex-grow: 1;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            overflow-y: auto;
            max-height: 65vh;
            border-radius: 10px;
            background: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }
        .message {
            max-width: 85%;
            padding: 12px;
            border-radius: 15px;
            font-size: 14px;
            word-wrap: break-word;
        }
        .bot {
            background: #e1f5fe;
            align-self: flex-start;
        }
        .user {
            background: #d1e7dd;
            align-self: flex-end;
        }
        .typing {
            font-style: italic;
            color: gray;
        }
        /* New styles for structured response */
        .response-container {
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin: 10px 0;
        }
        .response-container h1 {
            font-size: 18px;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }
        .response-container h2 {
            font-size: 16px;
            color: #333;
            margin: 10px 0 8px;
        }
        .response-container p, .response-container ul {
            font-size: 14px;
            color: #555;
            line-height: 1.6;
            margin-bottom: 10px;
        }
        .response-container b {
            font-weight: bold;
            color: #333;
        }
        .response-container ul {
            list-style-type: disc;
            padding-left: 20px;
        }
        .response-container li {
            margin-bottom: 5px;
        }
        .contact {
            font-style: italic;
            text-align: center;
            color: #555;
            margin-top: 10px;
        }
        .faq-section {
            text-align: center;
            margin: 20px 0;
        }
        .faq-buttons {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 10px;
        }
        .faq-buttons button {
            background: #333;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }
        .faq-buttons button:hover {
            background: #555;
        }
        .chat-input {
            width: 90%;
            max-width: 600px;
            display: flex;
            align-items: center;
            padding: 10px;
            background: white;
            border-radius: 30px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            position: fixed;
            bottom: 10px;
        }
        .chat-input input {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 30px;
            background: #f1f1f1;
            outline: none;
            font-size: 16px;
            margin-right: 50px;
        }
        .send-btn {
            position: absolute;
            right: 15px;
            background: #333;
            border: none;
            padding: 12px;
            border-radius: 50%;
            cursor: pointer;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            width: 40px;
            height: 40px;
            transition: 0.3s;
        }
        .send-btn:hover {
            background: #555;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="menu-icon"><i class="fas fa-bars"></i></div>
        <div class="title" id="title">VIDYASAARATHI</div>
    </nav>
    <div class="chat-container" id="chatbox">
        <div class="message bot" id="initialMessage">
            <div class="response-container">
                <h1>Welcome to VIDYASAARATHI</h1>
                <p>Hello! I’m your college assistant for Keshav Memorial Institute of Technology (KMIT). I can help you with information about <b>admissions</b>, <b>courses</b>, <b>faculty</b>, <b>exams</b>, <b>placements</b>, <b>campus facilities</b>, and more. Ask away!</p>
                <p class="contact">Contact <b>info@kmit.in</b> for further assistance.</p>
            </div>
        </div>
    </div>
    <div class="faq-section">
        <h3>FAQs</h3>
        <div class="faq-buttons" id="faqButtons">
            <button onclick="sendFAQ('Tell me about Admissions')">Admissions</button>
            <button onclick="sendFAQ('Tell me about Placements')">Placements</button>
            <button onclick="sendFAQ('Tell me about Campus Facilities')">Campus Facilities</button>
        </div>
    </div>
    <div class="chat-input">
        <input type="text" id="userInput" placeholder="Ask your question here!" onkeypress="handleKeyPress(event)">
        <button class="send-btn" id="sendBtn">➜</button>
    </div>

    <script>
        // Enhanced markdown parser
        function parseMarkdown(text) {
            // Convert **text** to <b>text</b>
            text = text.replace(/\*\*([^\*]+)\*\*/g, '<b>$1</b>');
            // Convert * item to <li>item</li> for lists
            text = text.replace(/\n\s*\*\s+([^\n]+)/g, '<li>$1</li>');
            // Wrap lists in <ul> tags
            text = text.replace(/(<li>.*<\/li>)/g, '<ul>$1</ul>');
            // Convert newlines to <br> for better formatting
            text = text.replace(/\n/g, '<br>');
            return text;
        }

        // Format response into structured HTML
        function formatResponse(query, answer) {
            // Simple query categorization for title
            const queryLower = query.toLowerCase();
            let title = 'KMIT Information';
            if (queryLower.includes('admissions')) title = 'KMIT Admissions Information';
            else if (queryLower.includes('placements')) title = 'KMIT Placements Information';
            else if (queryLower.includes('faculty')) title = 'KMIT Faculty Information';
            else if (queryLower.includes('campus facilities')) teslim = 'KMIT Campus Facilities Information';
            else if (queryLower.includes('distance')) title = 'Distance from KMIT';

            return `
                <div class="response-container">
                    <h1>${title}</h1>
                    <p>${answer}</p>
                    <p class="contact">For further details, contact <b>info@kmit.in</b>.</p>
                </div>
            `;
        }

        async function getAnswer(query) {
            try {
                const response = await fetch("/query", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ query })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();
                if (!data.answer) {
                    throw new Error("No answer in response");
                }
                // Parse markdown and sanitize
                const parsedAnswer = parseMarkdown(data.answer);
                return DOMPurify.sanitize(parsedAnswer);
            } catch (error) {
                console.error("Fetch error:", error.message);
                return DOMPurify.sanitize("Sorry, something went wrong. Please try again or contact <b>info@kmit.in</b>.");
            }
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                document.getElementById("sendBtn").click();
            }
        }

        async function sendFAQ(query) {
            document.getElementById("userInput").value = query;
            await document.getElementById("sendBtn").click();
        }

        document.getElementById("sendBtn").addEventListener("click", async function () {
            const query = document.getElementById("userInput").value.trim();
            if (!query) return alert('Please enter a question!');

            let chatBox = document.getElementById("chatbox");
            let userMessage = document.createElement("div");
            userMessage.classList.add("message", "user");
            userMessage.textContent = query;
            chatBox.appendChild(userMessage);
            chatBox.scrollTop = chatBox.scrollHeight;
            document.getElementById("userInput").value = "";

            let typingIndicator = document.createElement("div");
            typingIndicator.classList.add("message", "bot", "typing");
            typingIndicator.textContent = "Typing...";
            chatBox.appendChild(typingIndicator);
            chatBox.scrollTop = chatBox.scrollHeight;

            let answer = await getAnswer(query);
            chatBox.removeChild(typingIndicator);
            let botMessage = document.createElement("div");
            botMessage.classList.add("message", "bot");
            // Wrap answer in structured format
            botMessage.innerHTML = formatResponse(query, answer);
            chatBox.appendChild(botMessage);
            chatBox.scrollTop = chatBox.scrollHeight;
        });
    </script>
</body>
</html>